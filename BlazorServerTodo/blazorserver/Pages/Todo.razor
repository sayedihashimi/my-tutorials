@page "/todo"
@using System.Text.Json;
@inject IWebHostEnvironment Environment

<h1 class="todoHeading">Todo <span hidden="@(!(todos.Count(todo => !todo.IsDone) > 0))">(@todos.Count(todo => !todo.IsDone) remaining)</span></h1>

<ul class="todolist">
    @if(todos?.Count() > 0)
    {
        foreach (var todo in todos)
        {
            <li class="todoitem">
                <input type="checkbox" @bind="todo.IsDone" />
                <input type="text" @bind="todo.Title" />
                <span class="todoRemoveButton" @onclick="() => RemoveTodo(todo)">z</span>
            </li>
        }    
    }
    else
    {
        <h2 class="notodosHeading">You're all caught up!</h2>
    }
</ul>

<h3 class="addTodoHeading">Add a new todo item</h3>
<input type="text" placeholder="Something todo" @bind="newTodo" />
<button @onclick="AddTodo">Add todo</button>

@code {
    private List<TodoItem> todos = new();
    private string? newTodo;

    private string? todoFilePath;
    protected override async Task OnInitializedAsync()
    {
        todoFilePath = Path.Combine(Environment.ContentRootPath,"wwwroot", "todo.json");
        if (File.Exists(todoFilePath))
        {
            var str = await File.ReadAllTextAsync(todoFilePath);
            if (!string.IsNullOrEmpty(str))
            {
                todos = JsonSerializer.Deserialize<List<TodoItem>>(str);    
            }
        }
    }

    private void AddTodo()
    {
        if (!string.IsNullOrWhiteSpace(newTodo))
        {
            todos.Add(new TodoItem { Title = newTodo });
            newTodo = string.Empty;
        }

        // save to file
        var path = Path.Combine(Environment.ContentRootPath,"wwwroot", "todo.json");
        var jsonstr = JsonSerializer.Serialize(todos);
        if (File.Exists(path))
        {
            File.Delete(path);
        }
        File.WriteAllText(path, jsonstr);
    }
    private void RemoveTodo(TodoItem item)
    {
        todos.Remove(item);
    }
}